forces on a quadrotor

gravity/weight, thrusts
translation equilibrium (hover)
rotational equilibrium (pointing)
moment

omega = rotation rate of motor (radians/sec)
kf and Km are empirically derived constants


rotational force and moment are proportional to omega squred
F = Kf * omega**2
M = Km * omega**2

vertical acceleration
1.
F1 = Kf * omega_1**2
F2 = Kf * omega_2**2
Fg = M * g
z_dot_dot = Fg - F1 - F2
z_dot_dot = (M * g - Kf * O1**2 - Kf * O2**2) / M
2.
z_dot_dot = self.g - (self.k_f / self.m) * (self.omega_1**2 + self.omega_2**2)
z_dot_dot = g - (kf * O1**2 + Kf * O2**2) / M


F = m * a
Fz = m*Z-dot-dot
Tau = I * alpha
Mz = Iz * psi_dot_dot

G = 9.81
weight = mass * G
mass = weight / G
G = weight / mass

torque

net torque = tau = I * alpha
alpha = angular acceleration radians/sec**2
I = moment of inertia
Mz = Iz * psi_dot_dot (angular acceleration)

psi_dot_dot = Mz / Iz


FORCE
imbalanced forces cause acceleration
F = ma (vectors)

vertical Fz = m*z_dot_dot (second derivative of position)

F = 2.2 kg * -9.8 + 2.2 * -4

Mz = Iz * psi_dot_dot = Km * omega**2 = M


1. Rotation Rates ->
Ft, Mx,My,Mz

2. Fz -> z_dot_dot
   Mz -> psi_dot_dot

3. Z_dot_dot -> integrate -> integrate -> z
   psi_dot_dot -> integrate -> integrate -> psi


PD Controller -> double integrator system
        err = z_target - z_actual
        err_dot = z_dot_target - z_dot_actual
        u_bar = self.k_p * err + self.k_d * err_dot + z_dot_dot_ff
        u = self.vehicle_mass * (self.g - u_bar)

e = position error
e_dot = velocity error
u_bar = desired acceleration
omega_n = natural frequency of oscillation
k_d = derivative_constant = 2 * damping factor * natural frequency of oscillation = 2 * d * omega_n
K_p = proportional constant = natural frequency of oscillation ** 2 = omega_n ** 2
e_dot_dot + 2 * d * omega_n * e_dot + omega_ n**2

Overshoot
T_rise ->
T_settle -> +-2% of target

Tuning
to decrease rise time, increase omega_n
1. 0.7 < d < 1.0  damping ratio
2. choose large omega_n for smaller rise and settling time subject
   to system contraints

   T = 1 / omega_n
   T_rise = 1.57 * T

choose damping ratio, then iterate omega_n

PID controller
u_bar = z_dot_dot_ff + Kp * e + Ki * accumulated error + Kd * e_dot
T = time_constant
Kp = (1/T**2) * (1 + 2d)
Ki = 1 / T**3
Kd = (1/T) * (1 + 2d)



=========================================
2D cascaded controller
=========================================
u = commanded thrust
u_bar = desired acceleration
z_dot_dot = g - u/m
z_dot_dot = u_bar
phi = roll

2D dynamics
-----------
omega = rotational velocity
F = force
F = Kf * omega**2

U1 = total collective thrust
U1 = Kf(omega1**2 + omega2**2)
U2 = total moment around x (roll) axis
Mx = length * F
Mx = length * Kf * omega**2
U2 = length * Kf * (omega1**2 - omega2**2)


y_dot_dot = u1/m * sin(phi)
z_dot_dot = g - u1/m * cos(phi)
phi_dot_dot = u2 / Ixx

# solution values
z_k_p   = 0.1
z_k_d   = 10.0
y_k_p   = 0.3
y_k_d   = 10.0
phi_k_p = 150.0
phi_k_d = 50.0

# nonlinear dynamics
u1 = m * (g - u1_bar)/cos(phi)
phi_cmd = arc_sin((m * y_dot_dot_targ) / u1)
u2 = Ix * u2_bar
